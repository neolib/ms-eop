using Microsoft.Azure.Ipam.Client;
using Microsoft.Azure.Ipam.Contracts;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using static System.Console;

namespace FindInvalidIP
{
    class Processor
    {
        internal IpamClient IpamClient { get; set; }
        internal string AddresSpaceId { get; set; }

        private List<string> processedList = new List<string>();

        /// <summary>
        /// Processes input XML file and checks against IPAM for invalid IP addresses.
        /// </summary>
        /// <param name="resultFile">Result XML file generated by the FindIPTags applet.</param>
        /// <remarks>
        /// Output is in CSV format.
        /// </remarks>
        internal async Task Process(string resultFile)
        {
            var sep = new[] { ',', ' ' };
            var xd = XDocument.Load(resultFile);
            var fileNodes = xd.Root.Elements("file");
            foreach (var fileNode in fileNodes)
            {
                var envName = Path.GetFileNameWithoutExtension(fileNode.Attribute("path").Value);
                foreach (var node in fileNode.Elements())
                {
                    foreach (var attr in node.Attributes())
                    {
                        if (attr.Name == "path") continue;

                        if (attr.Value.IndexOfAny(sep) > 0)
                        {
                            var a = attr.Value.Split(sep, StringSplitOptions.RemoveEmptyEntries);
                            foreach (var prefix in a)
                            {
                                if (!await FindIP(envName, prefix))
                                {
                                    WriteLine($"{envName},{prefix},{node.Name}");
                                }
                            }
                        }
                        else if (!await FindIP(envName, attr.Value))
                        {
                            WriteLine($"{envName},{attr.Value},{node.Name}");
                        }
                    }
                }
            }
        }

        async Task<bool> FindIP(string envName, string prefix)
        {
            if (processedList.Contains(prefix)) return true;

            var result = await FindInAddressSpace_(SpecialAddressSpaces.DefaultAddressSpaceId);
            if (result == null)
            {
                // If not found, then continue query against GalaCake...

                result = await FindInAddressSpace_(SpecialAddressSpaces.GalaCakeAddressSpaceId);
                return result.GetValueOrDefault();
            }
            else return result.Value;

            async Task<bool?> FindInAddressSpace_(string addressSpaceId_)
            {
                var queryModel = AllocationQueryModel.Create(addressSpaceId_, prefix);
                var queryResult = await this.IpamClient.QueryAllocationsAsync(queryModel);
                processedList.Add(prefix);
                if (queryResult?.Count == 1)
                {
                    var parent = queryResult.Single();
                    var title = parent.Tags["Title"];
                    return title != null && title.Contains(envName);
                }
                return null;
            }
        }

    }
}
