using Microsoft.Azure.Ipam.Client;
using Microsoft.Azure.Ipam.Contracts;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using static System.Console;

namespace FindInvalidIP
{
    enum ValidationStatus
    {
        Unknown,
        Success,
        NoMatch,        // No matching record found in Kusto
        EmptyTitle,
        EmptyRegion,
        InvalidTitle,   // No environment name in title
    }

    class Processor
    {
        internal IpamClient IpamClient { get; set; }

        private List<string> processedList = new List<string>();

        /// <summary>
        /// Processes input XML file and checks against IPAM for invalid IP addresses.
        /// </summary>
        /// <param name="resultFile">Result XML file generated by the FindIPTags applet.</param>
        /// <remarks>
        /// Output is in CSV format.
        /// </remarks>
        internal async Task Process(string resultFile)
        {
            var sep = new[] { ',', ' ' };
            var xd = XDocument.Load(resultFile);
            var fileNodes = xd.Root.Elements("file");
            WriteLine("Envionment,IP Range,Status");
            foreach (var fileNode in fileNodes)
            {
                var envName = Path.GetFileNameWithoutExtension(fileNode.Attribute("path").Value);
                foreach (var node in fileNode.Elements())
                {
                    foreach (var attr in node.Attributes())
                    {
                        if (attr.Name == "path") continue;

                        if (attr.Value.IndexOfAny(sep) > 0)
                        {
                            var a = attr.Value.Split(sep, StringSplitOptions.RemoveEmptyEntries);
                            foreach (var prefix in a)
                            {
                                var result = await FindIP(envName, prefix);
                                if (result != ValidationStatus.Success)
                                {
                                    WriteLine($"{envName},{prefix},{result}");
                                }
                            }
                        }
                        else
                        {
                            var result = await FindIP(envName, attr.Value);
                            if (result != ValidationStatus.Success)
                            {
                                WriteLine($"{envName},{attr.Value},{result}");
                            }
                        }
                    }
                }
            }
        }

        async Task<ValidationStatus> FindIP(string envName, string ipString)
        {
            if (processedList.Contains(ipString)) return ValidationStatus.Success;

            var prefix = ipString;
            var isPrefix = ipString.Contains('/');
            if (!isPrefix)
            {
                if (ipString.Contains(':')) prefix = ipString + "/128";
                else prefix = ipString + "/32";
            }

            var result = await FindInAddressSpace_(SpecialAddressSpaces.DefaultAddressSpaceId);
            if (result == ValidationStatus.NoMatch)
            {
                // If not found, then continue query against GalaCake...
                return await FindInAddressSpace_(SpecialAddressSpaces.GalaCakeAddressSpaceId);
            }
            return result;

            async Task<ValidationStatus> FindInAddressSpace_(string addressSpaceId_)
            {
                var queryModel = AllocationQueryModel.Create(addressSpaceId_, prefix);
                var queryResult = await this.IpamClient.QueryAllocationsAsync(queryModel);
                processedList.Add(prefix);
                if (queryResult?.Count == 1)
                {
                    var parent = queryResult.Single();

                    if (isPrefix)
                    {
                        var region = parent.Tags["Region"];
                        if (string.IsNullOrWhiteSpace(region)) return ValidationStatus.EmptyRegion;
                    }
                    else
                    {
                        var title = parent.Tags["Title"];
                        if (string.IsNullOrWhiteSpace(title)) return ValidationStatus.EmptyTitle;
                        else if (!title.Contains(envName)) return ValidationStatus.InvalidTitle;
                    }
                    return ValidationStatus.Success;
                }
                return ValidationStatus.NoMatch;
            }
        }

    }
}
