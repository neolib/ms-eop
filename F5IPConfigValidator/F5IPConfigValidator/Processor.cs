using Microsoft.Azure.Ipam.Client;
using Microsoft.Azure.Ipam.Contracts;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using System.Xml.XPath;
using static System.Console;

namespace F5IPConfigValidator
{
    public enum ValidationStatus
    {
        Unknown,
        Success,
        NoMatch,            // No matching record found in Kusto
        EmptyTitle,
        EmptyDatacenter,
        NoneEopDcName,      // Azure name has no EOP name
        MismatchedDcName,   // Azure name does not match EOP name
        InvalidTitle,       // No environment/DC name in title
    }

    public class ValidationResult
    {
        public ValidationStatus Status;
        public string Summary;

        public ValidationResult(ValidationStatus status, string summary = null)
        {
            this.Status = status;
            this.Summary = summary;
        }

        public static ValidationResult Success => new ValidationResult(ValidationStatus.Success);
    }

    class Processor
    {
        internal IpamClient IpamClient { get; set; }
        private List<string> ipHotList = new List<string>();
        private List<string> prefixIdList = new List<string>();
        private Dictionary<string, string> eopToAzureDcLookupTable;
        private Dictionary<string, string> azureToEopDcLookupTable;

        private void LoadDcNames()
        {
            var myType = this.GetType();
            var rcName = myType.Namespace + ".Files.DCNAMES.xml";
            using (var rcs = myType.Assembly.GetManifestResourceStream(rcName))
            {
                var dcNameTable = XDocument.Load(rcs);

                eopToAzureDcLookupTable = new Dictionary<string, string>();
                azureToEopDcLookupTable = new Dictionary<string, string>();
                foreach (var node in dcNameTable.Root.Elements())
                {
                    var eopName = node.Attribute("EOPNAME").Value;
                    var azureName = node.Attribute("AZURENAME").Value;
                    eopToAzureDcLookupTable[eopName] = azureName;
                    azureToEopDcLookupTable[azureName] = eopName;
                }
            }
        }

        private string GetEopDcName(string azureName)
        {
            if (azureToEopDcLookupTable.TryGetValue(azureName.ToUpper(), out var name))
            { return name; }
            return null;
        }

        /// <summary>
        /// Processes input XML file and checks against IPAM for invalid IP addresses.
        /// </summary>
        /// <param name="resultFile">Result XML file generated by the IpTagFinder applet.</param>
        /// <remarks>
        /// Output is in CSV format.
        /// </remarks>
        internal async Task Process(string resultFile)
        {
            // CSV header row
            WriteLine("Envionment,IP Range,Status,Summary");

            //var debug = false;
            var sep = new[] { ',', ' ' };
            var xd = XDocument.Load(resultFile);
            var tasks = new List<Task>();

            LoadDcNames();
            var envNodes = xd.Root.XPathSelectElements("//file[not(starts-with(@name, '_'))]");
            var configNodes = xd.Root.XPathSelectElements("//file[starts-with(@name, '_')]");

            if (!envNodes.Any())
            {
                throw new Exception("No environment nodes!");
            }
            if (!configNodes.Any())
            {
                throw new Exception("No _config nodes!");
            }

            // Process non-configuration nodes first because
            // configuration nodes may have duplicate IP strings.
            foreach (var fileNode in envNodes)
            {
                tasks.Add(ProcessFileNode_(fileNode));
            }
            Task.WaitAll(tasks.ToArray());

            foreach (var fileNode in configNodes)
            {
                await ProcessFileNode_(fileNode);
            }
            
            async Task ProcessFileNode_(XElement fileNode_)
            {
                var configName = fileNode_.Attribute("name").Value;
                Error.WriteLine(configName);

                var envName = ExtractEnvironmentName_(configName);
                /*
                 * Special configuration filenames start with an underscore.
                 * Real environment filenames do not.
                 */
                var isEnvName = !envName.StartsWith("_");
                string forestName = null;
                string eopDcName = null;
                if (isEnvName)
                {
                    var index = envName.LastIndexOf('-');
                    if (index > 0)
                    {
                        forestName = envName.Substring(0, index);
                        eopDcName = envName.Substring(index + 1);
                    }
                }

                foreach (var node in fileNode_.Elements())
                {
                    foreach (var attr in node.Attributes())
                    {
                        if (attr.Name == "path") continue;
                        //if (debug) continue;
                        //else debug = true;

                        if (attr.Value.IndexOfAny(sep) > 0)
                        {
                            var a = attr.Value.Split(sep, StringSplitOptions.RemoveEmptyEntries);
                            foreach (var ipString in a)
                            {
                                await ProcessIpString_(ipString);
                            }
                        }
                        else
                        {
                            await ProcessIpString_(attr.Value);
                        }
                    }
                }

                async Task ProcessIpString_(string ipString_)
                {
                    // aA valid IPv6 string must have at least 5 groups.
                    if (ipString_.Contains(':') && 
                        ipString_.Last() != ':'
                        && ipString_.Count((c) => c == ':') <= 4) return;

                    lock (ipHotList)
                    {
                        if (ipHotList.Contains(ipString_))
                        {
                            return;
                        }
                        else
                        {
                            ipHotList.Add(ipString_);
                        }
                    }

                    try
                    {
                        var result = await ValidateIpString(forestName, eopDcName, ipString_);
                        if (result.Status != ValidationStatus.Success)
                        {
                            WriteLine($"{envName},{ipString_},{result.Status},{result.Summary.ToCsvValue()}");
                        }
                    }
                    catch (Exception ex)
                    {
                        Error.WriteLine($"\r\n!!!{envName} {ipString_}:\r\n{ex}");
                    }
                }
            }

            string ExtractEnvironmentName_(string filename_)
            {
                var index = filename_.LastIndexOf('.');
                if (index > 0) return filename_.Substring(0, index);
                return filename_;
            }
        }

        private string[] addressSpaceIds = new[] {
            SpecialAddressSpaces.DefaultAddressSpaceId,
            SpecialAddressSpaces.GalaCakeAddressSpaceId,
            SpecialAddressSpaces.EXAddressSpaceId,
            SpecialAddressSpaces.RXAddressSpaceId
            };

        async Task<ValidationResult> ValidateIpString(string forestName, string eopDcName, string ipString)
        {
            var isEnvName = forestName != null;
            var isPrefix = ipString.Contains('/');

            foreach (var addressSpaceId in addressSpaceIds)
            {
                var result = await FindInAddressSpace_(SpecialAddressSpaces.DefaultAddressSpaceId);
                if (result.Status == ValidationStatus.NoMatch) { continue; }
                return result;
            }
            return new ValidationResult(ValidationStatus.NoMatch, "No matched record found");

            async Task<ValidationResult> FindInAddressSpace_(string addressSpaceId_)
            {
                var queryModel = AllocationQueryModel.Create(addressSpaceId_, ipString);
                queryModel.ReturnParentWhenNotFound = !isPrefix;
                queryModel.MaxResults = 1000;

                var queryResult = await this.IpamClient.QueryAllocationsAsync(queryModel);
                var parent = queryResult.FirstOrDefault();
                if (parent == null) return new ValidationResult(ValidationStatus.NoMatch);

                // Skip this top prefix!
                if (parent.Prefix.StartsWith("0.0.0.0")) return ValidationResult.Success;
                lock (prefixIdList)
                {
                    if (prefixIdList.Contains(parent.Id)) return ValidationResult.Success;
                    prefixIdList.Add(parent.Id);
                }

                // No need to validate tags of an IP range prefix.
                if (isPrefix) return ValidationResult.Success;

                parent.Tags.TryGetValue("Title", out var title);
                if (string.IsNullOrWhiteSpace(title))
                {
                    return new ValidationResult(
                        ValidationStatus.EmptyTitle,
                        $"{parent.Prefix}: Title should not be empty");
                }

                parent.Tags.TryGetValue("Datacenter", out var dcName);
                if (string.IsNullOrWhiteSpace(dcName))
                {
                    return new ValidationResult(
                        ValidationStatus.EmptyDatacenter,
                        $"{parent.Prefix}: Datacenter tag should not be empty");
                }

                if (isEnvName)
                {
                    if (!dcName.IsSameTextAs(eopDcName))
                    {
                        var mappeEopDcName = GetEopDcName(dcName);
                        if (string.IsNullOrWhiteSpace(mappeEopDcName))
                        {
                            return new ValidationResult(
                                ValidationStatus.NoneEopDcName,
                                $"{parent.Prefix}: Datacenter {dcName} does not have an EOP name");
                        }
                        if (!eopDcName.IsSameTextAs(mappeEopDcName))
                        {
                            return new ValidationResult(
                                ValidationStatus.MismatchedDcName,
                                $"{parent.Prefix}: Datacenter {dcName} has an EOP name {mappeEopDcName} which is not matched in config file ({eopDcName})");
                        }
                    }

                    if (!title.ContainsText(dcName) && !title.ContainsText(eopDcName))
                    {
                        return new ValidationResult(
                            ValidationStatus.InvalidTitle,
                            $"{parent.Prefix}: Title ({title}) contains no datacenter name {dcName} or EOP name {eopDcName}");
                    }

                    if (!forestName.ContainsText("gtm-") && !title.ContainsText(forestName))
                    {
                        return new ValidationResult(
                            ValidationStatus.InvalidTitle,
                            $"{parent.Prefix}: Title ({title}) contains no forest name {forestName}");
                    }
                }
                return ValidationResult.Success;
            }
        }
    }
}
