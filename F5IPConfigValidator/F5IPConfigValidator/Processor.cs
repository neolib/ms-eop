using Microsoft.Azure.Ipam.Client;
using Microsoft.Azure.Ipam.Contracts;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Xml.Linq;
using System.Xml.XPath;

namespace F5IPConfigValidator
{
    using static System.Console;
    using StringMap = Dictionary<string, string>;

    public enum ValidationStatus
    {
        Unknown,
        Success,
        NoMatch,            // No matching record found in Kusto
        Obsolete,           // Should be removed in config
        NoMappingDcName,    // EOP datacenter name has no mapping Azure name
        EmptyTitle,
        EmptyDatacenter,
        MismatchedDcName,   // Azure name does not match EOP name
        InvalidTitle,       // No environment/DC name in title
    }

    public class ValidationRecord
    {
        public string Prefix;
        public string Datacenter;
        public string Region;
        public string Title;
        public string Summary;
        public ValidationStatus Status;

        public ValidationRecord(ValidationStatus status, string summary = null)
        {
            this.Status = status;
            this.Summary = summary;
        }

        public static ValidationRecord NoMatch => new ValidationRecord(ValidationStatus.NoMatch);
        public static ValidationRecord Success => new ValidationRecord(ValidationStatus.Success);
    }

    class Processor
    {
        internal IpamClient IpamClient { get; set; }
        private List<string> ipHotList = new List<string>();
        private List<string> prefixIdList = new List<string>();
        private StringMap eopToAzureDcNameMap;
        
        private void LoadDcNames()
        {
            var myType = this.GetType();
            var rcName = myType.Namespace + ".Files.DCNAMES.xml";
            using (var rcs = myType.Assembly.GetManifestResourceStream(rcName))
            {
                var dcNameTable = XDocument.Load(rcs);

                eopToAzureDcNameMap = new StringMap();
                foreach (var node in dcNameTable.Root.Elements())
                {
                    var eopName = node.Attribute("EOPNAME").Value;
                    var azureName = node.Attribute("AZURENAME").Value;
                    eopToAzureDcNameMap[eopName] = azureName;
                }
            }
        }

        private string GetAzureDcName(string eopName)
        {
            if (eopToAzureDcNameMap.TryGetValue(eopName.ToUpper(), out var name))
            { return name; }
            return null;
        }

        /// <summary>
        /// Processes input XML file and checks against IPAM for invalid IP addresses.
        /// </summary>
        /// <param name="resultFile">Result XML file generated by the IpTagFinder applet.</param>
        /// <remarks>
        /// Output is in CSV format.
        /// </remarks>
        internal async Task Process(string resultFile)
        {
            // CSV header row
            WriteLine("Envionment,IP Query,Prefix,Datacenter,Region,Status,Summary,Title");

            //var debug = false;
            var sep = new[] { ',', ' ' };
            var xd = XDocument.Load(resultFile);
            var tasks = new List<Task>();

            LoadDcNames();
            var envNodes = xd.Root.XPathSelectElements("//file[not(starts-with(@name, '_'))]");
            var configNodes = xd.Root.XPathSelectElements("//file[starts-with(@name, '_')]");

            if (!envNodes.Any())
            {
                throw new Exception("No environment nodes!");
            }
            if (!configNodes.Any())
            {
                throw new Exception("No _config nodes!");
            }

            // Validate EOP to Azure name mapping.
            foreach (var fileNode in envNodes)
            {
                var configName = fileNode.Attribute("name").Value;
                var envName = ExtractEnvironmentName_(configName);
                var index = envName.LastIndexOf('-');
                if (index > 0)
                {
                    var eopDcName = envName.Substring(index + 1);

                    var azureName = GetAzureDcName(eopDcName);
                    if (azureName == null)
                    {
                        var summary = $"EOP datacenter name {eopDcName} has no Azure name";
                        WriteLine($"{envName},\"N/A\",,,,{ValidationStatus.NoMappingDcName},{summary}");
                    }
                }
            }

            // Process non-configuration nodes first because
            // configuration nodes may have duplicate IP strings.
            foreach (var fileNode in envNodes)
            {
                tasks.Add(ProcessFileNode_(fileNode));
            }
            Task.WaitAll(tasks.ToArray());

            foreach (var fileNode in configNodes)
            {
                await ProcessFileNode_(fileNode);
            }
            
            async Task ProcessFileNode_(XElement fileNode_)
            {
                var configName = fileNode_.Attribute("name").Value;
                Error.WriteLine(configName);

                var envName = ExtractEnvironmentName_(configName);
                /*
                 * Special configuration filenames start with an underscore.
                 * Real environment filenames do not.
                 * */
                var isEnvName = !envName.StartsWith("_");
                string forestName = null;
                string eopDcName = null;
                if (isEnvName)
                {
                    var index = envName.LastIndexOf('-');
                    if (index > 0)
                    {
                        forestName = envName.Substring(0, index);
                        eopDcName = envName.Substring(index + 1);
                    }
                }

                foreach (var node in fileNode_.Elements())
                {
                    foreach (var attr in node.Attributes())
                    {
                        if (attr.Name == "path") continue;
                        //if (debug) continue;
                        //else debug = true;

                        if (attr.Value.IndexOfAny(sep) > 0)
                        {
                            var a = attr.Value.Split(sep, StringSplitOptions.RemoveEmptyEntries);
                            foreach (var ipString in a)
                            {
                                await ProcessIpString_(ipString);
                            }
                        }
                        else
                        {
                            await ProcessIpString_(attr.Value);
                        }
                    }
                }

                async Task ProcessIpString_(string ipString_)
                {
                    // A valid IPv6 string must have at least 5 groups.
                    if (ipString_.Contains(':') && 
                        !ipString_.EndsWith("::") &&
                        ipString_.Count((c) => c == ':') <= 4) return;

                    lock (ipHotList)
                    {
                        if (ipHotList.Contains(ipString_))
                        {
                            return;
                        }
                        else
                        {
                            ipHotList.Add(ipString_);
                        }
                    }

                    try
                    {
                        var result = await ValidateIpString(forestName, eopDcName, ipString_);
                        if (result.Status != ValidationStatus.Success)
                        {
                            WriteLine($"{envName},{ipString_},{result.Prefix},{result.Datacenter},{result.Region.ToCsvValue()},{result.Status},{result.Summary.ToCsvValue()},{result.Title.ToCsvValue()}");
                        }
                    }
                    catch (Exception ex)
                    {
                        Error.WriteLine($"\r\n!!!{envName} {ipString_}:\r\n{ex}");
                    }
                }
            }

            string ExtractEnvironmentName_(string filename_)
            {
                var index = filename_.LastIndexOf('.');
                if (index > 0) return filename_.Substring(0, index);
                return filename_;
            }
        }

        private string[] addressSpaceIds = new[] {
            SpecialAddressSpaces.DefaultAddressSpaceId,
            SpecialAddressSpaces.GalaCakeAddressSpaceId,
            SpecialAddressSpaces.EXAddressSpaceId,
            SpecialAddressSpaces.RXAddressSpaceId
            };

        async Task<ValidationRecord> ValidateIpString(string forestName, string eopDcName, string ipString)
        {
            var isEnvName = forestName != null;
            var isPrefixString = ipString.Contains('/');

            foreach (var addressSpaceId in addressSpaceIds)
            {
                var result = await FindInAddressSpace_(SpecialAddressSpaces.DefaultAddressSpaceId);
                if (result.Status == ValidationStatus.NoMatch) { continue; }
                return result;
            }
            return new ValidationRecord(ValidationStatus.NoMatch, "No matched record found");

            async Task<ValidationRecord> FindInAddressSpace_(string addressSpaceId_)
            {
                var queryModel = AllocationQueryModel.Create(addressSpaceId_, ipString);
                queryModel.ReturnParentWhenNotFound = !isPrefixString;
                queryModel.MaxResults = 1000;

                var queryResult = await this.IpamClient.QueryAllocationsAsync(queryModel);
                var parent = queryResult.FirstOrDefault();
                if (parent == null) return ValidationRecord.NoMatch;

                lock (prefixIdList)
                {
                    if (prefixIdList.Contains(parent.Id)) return ValidationRecord.Success;
                    prefixIdList.Add(parent.Id);
                }

                // No need to validate tags of an IP range prefix.
                if (isPrefixString) return ValidationRecord.Success;

                var prefix = parent.Prefix;
                parent.Tags.TryGetValue("Title", out var title);
                parent.Tags.TryGetValue("Datacenter", out var ipamDcName);
                parent.Tags.TryGetValue("Region", out var region);

                if (int.TryParse(
                    prefix.Substring(prefix.LastIndexOf('/') + 1),
                    out var prefixNumber))
                {
                    // Skip large blocks.

                    if (prefix.Contains(':')) // IPv6
                    {
                        if (prefixNumber < 64)
                        {
                            return ValidationRecord.Success;
                        }
                    }
                    else // IPv4
                    {
                        if (prefixNumber < 23)
                        {
                            return ValidationRecord.Success;
                        } 
                    }
                }

                if (string.IsNullOrWhiteSpace(title))
                {
                    if (prefixNumber == 32)
                    {
                        return new ValidationRecord(
                            ValidationStatus.Obsolete,
                            "Should be deleted")
                        {
                            Prefix = prefix,
                            Datacenter = ipamDcName,
                            Region = region,
                            Title = title,
                        };
                    }

                    return new ValidationRecord(
                        ValidationStatus.EmptyTitle,
                        "Title should not be empty")
                    {
                        Prefix = prefix,
                        Datacenter = ipamDcName,
                        Region = region,
                        Title = title,
                    };
                }
                
                if (string.IsNullOrWhiteSpace(ipamDcName))
                {
                    return new ValidationRecord(
                        ValidationStatus.EmptyDatacenter,
                        "Datacenter tag should not be empty")
                    {
                        Prefix = prefix,
                        Datacenter = ipamDcName,
                        Region = region,
                        Title = title,
                    };
                }

                if (isEnvName)
                {
                    if (ipamDcName.IsSameTextAs(eopDcName))
                    {
                        if (!title.ContainsText(ipamDcName))
                        {
                            return new ValidationRecord(
                                ValidationStatus.InvalidTitle,
                                $"Title does not contain datacenter name {ipamDcName}")
                            {
                                Prefix = prefix,
                                Datacenter = ipamDcName,
                                Region = region,
                                Title = title,
                            };
                        }
                    }
                    else
                    {
                        /*
                         * If datacenter name is not same as EOP name,
                         * then let's compare it with mapped Azure name.
                         * */

                        var azureDcName = GetAzureDcName(eopDcName);
                        if (azureDcName.IsSameTextAs(eopDcName))
                        {
                            return new ValidationRecord(
                                ValidationStatus.MismatchedDcName,
                                $"Datacenter {ipamDcName} does not match EOP name {eopDcName}")
                            {
                                Prefix = prefix,
                                Datacenter = ipamDcName,
                                Region = region,
                                Title = title,
                            };
                        }
                        else
                        {
                            if (azureDcName.IsSameTextAs(ipamDcName))
                            {
                                if (!title.ContainsText(ipamDcName) && !title.ContainsText(eopDcName))
                                {
                                    return new ValidationRecord(
                                        ValidationStatus.InvalidTitle,
                                        $"Title does not contain datacenter name {ipamDcName} or EOP name {eopDcName}")
                                    {
                                        Prefix = prefix,
                                        Datacenter = ipamDcName,
                                        Region = region,
                                        Title = title,
                                    };
                                }
                            }
                            else
                            {
                                return new ValidationRecord(
                                    ValidationStatus.MismatchedDcName,
                                    $"Datacenter {ipamDcName} does not match EOP name {eopDcName} in config or mapped Azure name {azureDcName}")
                                {
                                    Prefix = prefix,
                                    Datacenter = ipamDcName,
                                    Region = region,
                                    Title = title,
                                };
                            }
                        }
                    }

                    if (!(forestName.ContainsText("gtm-") || forestName.IsSameTextAs("gtm")))
                    {
                        if (!title.ContainsText(forestName))
                        {
                            return new ValidationRecord(
                                ValidationStatus.InvalidTitle,
                                $"Title does not contain forest name ({forestName})")
                            {
                                Prefix = prefix,
                                Datacenter = ipamDcName,
                                Region = region,
                                Title = title,
                            };
                        }
                    }
                }
                return ValidationRecord.Success;
            }
        }
    }
}
